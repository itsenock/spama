rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null; // Allow reading other users for contacts
    }
    
    // Chat rules
    match /chats/{chatId} {
      // Users can read/write chats they participate in
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      // Allow creating new chats if user is in participants
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
    }
    
    // Message rules
    match /messages/{messageId} {
      // Users can read messages from chats they participate in
      allow read: if request.auth != null && 
        isParticipantOfChat(request.auth.uid, resource.data.chatId);
      
      // Users can create messages in chats they participate in
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId &&
        isParticipantOfChat(request.auth.uid, request.resource.data.chatId);
      
      // Users can update their own messages (for status updates)
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
      
      // Users can delete their own messages
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
    }
    
    // Status updates rules
    match /statusUpdates/{statusId} {
      // Users can read status updates based on privacy settings
      allow read: if request.auth != null && (
        resource.data.privacy == 'all' ||
        (resource.data.privacy == 'contacts' && isContact(request.auth.uid, resource.data.userId)) ||
        (resource.data.privacy == 'selected' && request.auth.uid in resource.data.selectedContacts) ||
        (resource.data.privacy == 'except' && !(request.auth.uid in resource.data.exceptContacts))
      );
      
      // Users can create their own status updates
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      
      // Users can update/delete their own status updates
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Contacts rules
    match /contacts/{contactId} {
      // Users can read/write their own contacts
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Calls rules
    match /calls/{callId} {
      // Users can read/write calls they participate in
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      // Allow creating calls if user is the initiator
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.initiatedBy;
    }
    
    // Notifications rules
    match /notifications/{notificationId} {
      // Users can read/write their own notifications
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
  }
  
  // Helper functions
  function isParticipantOfChat(userId, chatId) {
    return exists(/databases/$(database)/documents/chats/$(chatId)) &&
      userId in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
  }
  
  function isContact(userId, contactUserId) {
    return exists(/databases/$(database)/documents/contacts/$(userId + '_' + contactUserId));
  }
}