{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { AuthProvider, useAuth } from \"./src/context/AuthContext\";\nimport MainTabNavigator from \"./src/navigation/MainTabNavigator\";\nimport ChatScreenFirebase from \"./src/screens/ChatScreenFirebase\";\nimport ContactInfoScreen from \"./src/screens/ContactInfoScreen\";\nimport SettingsScreen from \"./src/screens/SettingsScreen\";\nimport LoginScreen from \"./src/screens/auth/LoginScreen\";\nimport SignUpScreen from \"./src/screens/auth/SignUpScreen\";\nimport { Colors } from \"./src/constants/Colors\";\nimport { NotificationService } from \"./src/services/notificationService\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nfunction AuthNavigator() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    showLogin = _useState2[0],\n    setShowLogin = _useState2[1];\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      style: \"dark\",\n      backgroundColor: Colors.background.default\n    }), showLogin ? _jsx(LoginScreen, {\n      onSwitchToSignUp: function onSwitchToSignUp() {\n        return setShowLogin(false);\n      }\n    }) : _jsx(SignUpScreen, {\n      onSwitchToLogin: function onSwitchToLogin() {\n        return setShowLogin(true);\n      }\n    })]\n  });\n}\nfunction AppNavigator() {\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      style: \"light\",\n      backgroundColor: Colors.primary\n    }), _jsxs(Stack.Navigator, {\n      initialRouteName: \"Main\",\n      screenOptions: {\n        headerStyle: {\n          backgroundColor: Colors.primary\n        },\n        headerTintColor: Colors.white,\n        headerTitleStyle: {\n          fontWeight: 'bold'\n        }\n      },\n      children: [_jsx(Stack.Screen, {\n        name: \"Main\",\n        component: MainTabNavigator,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Chat\",\n        component: ChatScreenFirebase,\n        options: function options(_ref) {\n          var route = _ref.route;\n          return {\n            title: route.params.chatName,\n            headerBackTitleVisible: false\n          };\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"ContactInfo\",\n        component: ContactInfoScreen,\n        options: {\n          title: 'Contact Info'\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Settings\",\n        component: SettingsScreen,\n        options: {\n          title: 'Settings'\n        }\n      })]\n    })]\n  });\n}\nfunction AppContent() {\n  var _useAuth = useAuth(),\n    user = _useAuth.user,\n    loading = _useAuth.loading;\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    notificationToken = _useState4[0],\n    setNotificationToken = _useState4[1];\n  useEffect(function () {\n    if (user) {\n      initializeNotifications();\n    }\n  }, [user]);\n  var initializeNotifications = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var token = yield NotificationService.registerForPushNotifications();\n        if (token) {\n          setNotificationToken(token);\n          yield NotificationService.updateUserToken(user.id, token);\n        }\n        yield NotificationService.createNotificationCategories();\n        var notificationListener = NotificationService.addNotificationListener(function (notification) {\n          console.log('Notification received:', notification);\n          NotificationService.handleNotification(notification, function (chatId, senderId) {\n            console.log('New message in chat:', chatId, 'from:', senderId);\n          });\n        });\n        var responseListener = NotificationService.addNotificationResponseListener(function (response) {\n          console.log('Notification response:', response);\n        });\n        return function () {\n          notificationListener.remove();\n          responseListener.remove();\n        };\n      } catch (error) {\n        console.error('Notification initialization error:', error);\n        Alert.alert('Notifications', 'Failed to initialize push notifications. You may not receive message alerts.');\n      }\n    });\n    return function initializeNotifications() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  if (loading) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: Colors.background.default\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: Colors.primary\n      })\n    });\n  }\n  return user ? _jsx(AppNavigator, {}) : _jsx(AuthNavigator, {});\n}\nexport default function App() {\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    appIsReady = _useState6[0],\n    setAppIsReady = _useState6[1];\n  useEffect(function () {\n    function prepare() {\n      return _prepare.apply(this, arguments);\n    }\n    function _prepare() {\n      _prepare = _asyncToGenerator(function* () {\n        try {\n          yield new Promise(function (resolve) {\n            return setTimeout(resolve, 1000);\n          });\n        } catch (e) {\n          console.warn('App preparation error:', e);\n        } finally {\n          setAppIsReady(true);\n        }\n      });\n      return _prepare.apply(this, arguments);\n    }\n    prepare();\n  }, []);\n  if (!appIsReady) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: Colors.primary\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: Colors.white\n      })\n    });\n  }\n  return _jsx(SafeAreaProvider, {\n    children: _jsx(AuthProvider, {\n      children: _jsx(NavigationContainer, {\n        children: _jsx(AppContent, {})\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","NavigationContainer","createStackNavigator","StatusBar","SafeAreaProvider","View","ActivityIndicator","Alert","AuthProvider","useAuth","MainTabNavigator","ChatScreenFirebase","ContactInfoScreen","SettingsScreen","LoginScreen","SignUpScreen","Colors","NotificationService","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Stack","AuthNavigator","_useState","_useState2","_slicedToArray","showLogin","setShowLogin","children","style","backgroundColor","background","default","onSwitchToSignUp","onSwitchToLogin","AppNavigator","primary","Navigator","initialRouteName","screenOptions","headerStyle","headerTintColor","white","headerTitleStyle","fontWeight","Screen","name","component","options","headerShown","_ref","route","title","params","chatName","headerBackTitleVisible","AppContent","_useAuth","user","loading","_useState3","_useState4","notificationToken","setNotificationToken","initializeNotifications","_ref2","_asyncToGenerator","token","registerForPushNotifications","updateUserToken","id","createNotificationCategories","notificationListener","addNotificationListener","notification","console","log","handleNotification","chatId","senderId","responseListener","addNotificationResponseListener","response","remove","error","alert","apply","arguments","flex","justifyContent","alignItems","size","color","App","_useState5","_useState6","appIsReady","setAppIsReady","prepare","_prepare","Promise","resolve","setTimeout","e","warn"],"sources":["/project/workspace/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { View, ActivityIndicator, Alert } from 'react-native';\n\nimport { AuthProvider, useAuth } from './src/context/AuthContext';\nimport MainTabNavigator from './src/navigation/MainTabNavigator';\nimport ChatScreenFirebase from './src/screens/ChatScreenFirebase';\nimport ContactInfoScreen from './src/screens/ContactInfoScreen';\nimport SettingsScreen from './src/screens/SettingsScreen';\nimport LoginScreen from './src/screens/auth/LoginScreen';\nimport SignUpScreen from './src/screens/auth/SignUpScreen';\nimport { RootStackParamList } from './src/types';\nimport { Colors } from './src/constants/Colors';\nimport { NotificationService } from './src/services/notificationService';\n\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction AuthNavigator() {\n  const [showLogin, setShowLogin] = useState(true);\n\n  return (\n    <>\n      <StatusBar style=\"dark\" backgroundColor={Colors.background.default} />\n      {showLogin ? (\n        <LoginScreen onSwitchToSignUp={() => setShowLogin(false)} />\n      ) : (\n        <SignUpScreen onSwitchToLogin={() => setShowLogin(true)} />\n      )}\n    </>\n  );\n}\n\nfunction AppNavigator() {\n  return (\n    <>\n      <StatusBar style=\"light\" backgroundColor={Colors.primary} />\n      <Stack.Navigator\n        initialRouteName=\"Main\"\n        screenOptions={{\n          headerStyle: {\n            backgroundColor: Colors.primary,\n          },\n          headerTintColor: Colors.white,\n          headerTitleStyle: {\n            fontWeight: 'bold',\n          },\n        }}\n      >\n        <Stack.Screen \n          name=\"Main\" \n          component={MainTabNavigator} \n          options={{ headerShown: false }}\n        />\n        <Stack.Screen \n          name=\"Chat\" \n          component={ChatScreenFirebase} \n          options={({ route }) => ({ \n            title: route.params.chatName,\n            headerBackTitleVisible: false,\n          })}\n        />\n        <Stack.Screen \n          name=\"ContactInfo\" \n          component={ContactInfoScreen} \n          options={{ title: 'Contact Info' }}\n        />\n        <Stack.Screen \n          name=\"Settings\" \n          component={SettingsScreen} \n          options={{ title: 'Settings' }}\n        />\n      </Stack.Navigator>\n    </>\n  );\n}\n\nfunction AppContent() {\n  const { user, loading } = useAuth();\n  const [notificationToken, setNotificationToken] = useState<string | null>(null);\n\n  // Initialize notifications when user is authenticated\n  useEffect(() => {\n    if (user) {\n      initializeNotifications();\n    }\n  }, [user]);\n\n  const initializeNotifications = async () => {\n    try {\n      // Register for push notifications\n      const token = await NotificationService.registerForPushNotifications();\n      if (token) {\n        setNotificationToken(token);\n        // Update user's FCM token in Firestore\n        await NotificationService.updateUserToken(user!.id, token);\n      }\n\n      // Create notification categories\n      await NotificationService.createNotificationCategories();\n\n      // Listen for incoming notifications\n      const notificationListener = NotificationService.addNotificationListener(\n        (notification) => {\n          console.log('Notification received:', notification);\n          // Handle notification when app is in foreground\n          NotificationService.handleNotification(\n            notification,\n            (chatId, senderId) => {\n              console.log('New message in chat:', chatId, 'from:', senderId);\n              // You can show an in-app notification or update UI\n            }\n          );\n        }\n      );\n\n      // Listen for notification responses (when user taps notification)\n      const responseListener = NotificationService.addNotificationResponseListener(\n        (response) => {\n          console.log('Notification response:', response);\n          // This would handle navigation when user taps notification\n          // NotificationService.handleNotificationResponse(response, navigation);\n        }\n      );\n\n      // Cleanup listeners\n      return () => {\n        notificationListener.remove();\n        responseListener.remove();\n      };\n    } catch (error) {\n      console.error('Notification initialization error:', error);\n      Alert.alert(\n        'Notifications', \n        'Failed to initialize push notifications. You may not receive message alerts.'\n      );\n    }\n  };\n\n  // Show loading screen while checking authentication\n  if (loading) {\n    return (\n      <View style={{ \n        flex: 1, \n        justifyContent: 'center', \n        alignItems: 'center',\n        backgroundColor: Colors.background.default \n      }}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n      </View>\n    );\n  }\n\n  // Show appropriate navigator based on authentication state\n  return user ? <AppNavigator /> : <AuthNavigator />;\n}\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Pre-load any resources, fonts, etc.\n        // This is where you'd load custom fonts, cache images, etc.\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate loading\n      } catch (e) {\n        console.warn('App preparation error:', e);\n      } finally {\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  if (!appIsReady) {\n    return (\n      <View style={{ \n        flex: 1, \n        justifyContent: 'center', \n        alignItems: 'center',\n        backgroundColor: Colors.primary \n      }}>\n        <ActivityIndicator size=\"large\" color={Colors.white} />\n      </View>\n    );\n  }\n\n  return (\n    <SafeAreaProvider>\n      <AuthProvider>\n        <NavigationContainer>\n          <AppContent />\n        </NavigationContainer>\n      </AuthProvider>\n    </SafeAreaProvider>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}