{"ast":null,"code":"import { signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged, updateProfile, signInWithPhoneNumber } from \"firebase/auth\";\nimport { doc, setDoc, getDoc, updateDoc, serverTimestamp } from \"firebase/firestore\";\nimport { auth, db } from \"../config/firebase\";\nexport class AuthService {\n  static async signUpWithEmail(email, password, name, phone) {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const firebaseUser = userCredential.user;\n      await updateProfile(firebaseUser, {\n        displayName: name\n      });\n      const userData = {\n        id: firebaseUser.uid,\n        name,\n        phone,\n        email,\n        online: true,\n        status: \"Hey there! I am using WhatsApp.\",\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      await setDoc(doc(db, \"users\", firebaseUser.uid), Object.assign({}, userData, {\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp()\n      }));\n      return userData;\n    } catch (error) {\n      console.error(\"Sign up error:\", error);\n      throw error;\n    }\n  }\n  static async signInWithEmail(email, password) {\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      const firebaseUser = userCredential.user;\n      await this.updateUserStatus(firebaseUser.uid, true);\n      const userDoc = await getDoc(doc(db, \"users\", firebaseUser.uid));\n      if (userDoc.exists()) {\n        return userDoc.data();\n      } else {\n        throw new Error(\"User data not found\");\n      }\n    } catch (error) {\n      console.error(\"Sign in error:\", error);\n      throw error;\n    }\n  }\n  static async sendPhoneVerification(phoneNumber, recaptchaVerifier) {\n    try {\n      const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, recaptchaVerifier);\n      return confirmationResult;\n    } catch (error) {\n      console.error(\"Phone verification error:\", error);\n      throw error;\n    }\n  }\n  static async verifyPhoneCode(confirmationResult, verificationCode, name) {\n    try {\n      const userCredential = await confirmationResult.confirm(verificationCode);\n      const firebaseUser = userCredential.user;\n      const userDoc = await getDoc(doc(db, \"users\", firebaseUser.uid));\n      if (!userDoc.exists()) {\n        const userData = {\n          id: firebaseUser.uid,\n          name,\n          phone: firebaseUser.phoneNumber || \"\",\n          online: true,\n          status: \"Hey there! I am using WhatsApp.\",\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n        await setDoc(doc(db, \"users\", firebaseUser.uid), Object.assign({}, userData, {\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp()\n        }));\n        return userData;\n      } else {\n        await this.updateUserStatus(firebaseUser.uid, true);\n        return userDoc.data();\n      }\n    } catch (error) {\n      console.error(\"Phone verification error:\", error);\n      throw error;\n    }\n  }\n  static async signOut() {\n    try {\n      if (auth.currentUser) {\n        await this.updateUserStatus(auth.currentUser.uid, false);\n      }\n      await signOut(auth);\n    } catch (error) {\n      console.error(\"Sign out error:\", error);\n      throw error;\n    }\n  }\n  static async updateUserStatus(userId, online) {\n    try {\n      await updateDoc(doc(db, \"users\", userId), {\n        online,\n        lastSeen: online ? null : serverTimestamp(),\n        updatedAt: serverTimestamp()\n      });\n    } catch (error) {\n      console.error(\"Update status error:\", error);\n    }\n  }\n  static async updateUserProfile(userId, updates) {\n    try {\n      await updateDoc(doc(db, \"users\", userId), Object.assign({}, updates, {\n        updatedAt: serverTimestamp()\n      }));\n    } catch (error) {\n      console.error(\"Update profile error:\", error);\n      throw error;\n    }\n  }\n  static async getCurrentUserData() {\n    try {\n      if (!auth.currentUser) return null;\n      const userDoc = await getDoc(doc(db, \"users\", auth.currentUser.uid));\n      if (userDoc.exists()) {\n        return userDoc.data();\n      }\n      return null;\n    } catch (error) {\n      console.error(\"Get user data error:\", error);\n      return null;\n    }\n  }\n  static onAuthStateChanged(callback) {\n    return onAuthStateChanged(auth, callback);\n  }\n  static getCurrentUser() {\n    return auth.currentUser;\n  }\n}","map":{"version":3,"names":["signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","onAuthStateChanged","updateProfile","signInWithPhoneNumber","doc","setDoc","getDoc","updateDoc","serverTimestamp","auth","db","AuthService","signUpWithEmail","email","password","name","phone","userCredential","firebaseUser","user","displayName","userData","id","uid","online","status","createdAt","Date","updatedAt","Object","assign","error","console","signInWithEmail","updateUserStatus","userDoc","exists","data","Error","sendPhoneVerification","phoneNumber","recaptchaVerifier","confirmationResult","verifyPhoneCode","verificationCode","confirm","currentUser","userId","lastSeen","updateUserProfile","updates","getCurrentUserData","callback","getCurrentUser"],"sources":["/project/sandbox/src/services/authService.ts"],"sourcesContent":["import {\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n  User as FirebaseUser,\n  updateProfile,\n  RecaptchaVerifier,\n  signInWithPhoneNumber,\n  PhoneAuthProvider,\n  signInWithCredential,\n} from \"firebase/auth\";\nimport {\n  doc,\n  setDoc,\n  getDoc,\n  updateDoc,\n  serverTimestamp,\n} from \"firebase/firestore\";\nimport { auth, db } from \"../config/firebase\";\nimport { User } from \"../types\";\n\nexport class AuthService {\n  // Email/Password Authentication\n  static async signUpWithEmail(\n    email: string,\n    password: string,\n    name: string,\n    phone: string\n  ): Promise<User> {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(\n        auth,\n        email,\n        password\n      );\n      const firebaseUser = userCredential.user;\n\n      // Update profile\n      await updateProfile(firebaseUser, { displayName: name });\n\n      // Create user document in Firestore\n      const userData: User = {\n        id: firebaseUser.uid,\n        name,\n        phone,\n        email,\n        online: true,\n        status: \"Hey there! I am using WhatsApp.\",\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      await setDoc(doc(db, \"users\", firebaseUser.uid), {\n        ...userData,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      });\n\n      return userData;\n    } catch (error) {\n      console.error(\"Sign up error:\", error);\n      throw error;\n    }\n  }\n\n  static async signInWithEmail(email: string, password: string): Promise<User> {\n    try {\n      const userCredential = await signInWithEmailAndPassword(\n        auth,\n        email,\n        password\n      );\n      const firebaseUser = userCredential.user;\n\n      // Update user's online status\n      await this.updateUserStatus(firebaseUser.uid, true);\n\n      // Get user data from Firestore\n      const userDoc = await getDoc(doc(db, \"users\", firebaseUser.uid));\n      if (userDoc.exists()) {\n        return userDoc.data() as User;\n      } else {\n        throw new Error(\"User data not found\");\n      }\n    } catch (error) {\n      console.error(\"Sign in error:\", error);\n      throw error;\n    }\n  }\n\n  // Phone Authentication\n  static async sendPhoneVerification(\n    phoneNumber: string,\n    recaptchaVerifier: RecaptchaVerifier\n  ) {\n    try {\n      const confirmationResult = await signInWithPhoneNumber(\n        auth,\n        phoneNumber,\n        recaptchaVerifier\n      );\n      return confirmationResult;\n    } catch (error) {\n      console.error(\"Phone verification error:\", error);\n      throw error;\n    }\n  }\n\n  static async verifyPhoneCode(\n    confirmationResult: any,\n    verificationCode: string,\n    name: string\n  ): Promise<User> {\n    try {\n      const userCredential = await confirmationResult.confirm(verificationCode);\n      const firebaseUser = userCredential.user;\n\n      // Check if user already exists\n      const userDoc = await getDoc(doc(db, \"users\", firebaseUser.uid));\n\n      if (!userDoc.exists()) {\n        // Create new user\n        const userData: User = {\n          id: firebaseUser.uid,\n          name,\n          phone: firebaseUser.phoneNumber || \"\",\n          online: true,\n          status: \"Hey there! I am using WhatsApp.\",\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        };\n\n        await setDoc(doc(db, \"users\", firebaseUser.uid), {\n          ...userData,\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n        });\n\n        return userData;\n      } else {\n        // Update existing user's online status\n        await this.updateUserStatus(firebaseUser.uid, true);\n        return userDoc.data() as User;\n      }\n    } catch (error) {\n      console.error(\"Phone verification error:\", error);\n      throw error;\n    }\n  }\n\n  // Sign out\n  static async signOut(): Promise<void> {\n    try {\n      if (auth.currentUser) {\n        await this.updateUserStatus(auth.currentUser.uid, false);\n      }\n      await signOut(auth);\n    } catch (error) {\n      console.error(\"Sign out error:\", error);\n      throw error;\n    }\n  }\n\n  // Update user online status\n  static async updateUserStatus(\n    userId: string,\n    online: boolean\n  ): Promise<void> {\n    try {\n      await updateDoc(doc(db, \"users\", userId), {\n        online,\n        lastSeen: online ? null : serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      });\n    } catch (error) {\n      console.error(\"Update status error:\", error);\n    }\n  }\n\n  // Update user profile\n  static async updateUserProfile(\n    userId: string,\n    updates: Partial<User>\n  ): Promise<void> {\n    try {\n      await updateDoc(doc(db, \"users\", userId), {\n        ...updates,\n        updatedAt: serverTimestamp(),\n      });\n    } catch (error) {\n      console.error(\"Update profile error:\", error);\n      throw error;\n    }\n  }\n\n  // Get current user data\n  static async getCurrentUserData(): Promise<User | null> {\n    try {\n      if (!auth.currentUser) return null;\n\n      const userDoc = await getDoc(doc(db, \"users\", auth.currentUser.uid));\n      if (userDoc.exists()) {\n        return userDoc.data() as User;\n      }\n      return null;\n    } catch (error) {\n      console.error(\"Get user data error:\", error);\n      return null;\n    }\n  }\n\n  // Auth state listener\n  static onAuthStateChanged(callback: (user: FirebaseUser | null) => void) {\n    return onAuthStateChanged(auth, callback);\n  }\n\n  // Get current Firebase user\n  static getCurrentUser(): FirebaseUser | null {\n    return auth.currentUser;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}